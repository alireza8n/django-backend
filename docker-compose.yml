version: "3.7"


services:
  db:
    image: postgres:13-alpine
    hostname: db
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    networks:
      - db
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          cpus: '0.75'
          memory: 800M
        reservations:
          cpus: '0.1'
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 1s


  app:
    build:
      context: ${APP_ROOT:-.}
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ${APP_ROOT:-.}:/opt/app
      - ~/.ipython:/root/ipython
    depends_on:
      - db
      - minio
    ports:
      - 8000:8000
    networks:
      - db
      - storage
      - webserver
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          cpus: '0.9'
          memory: 700M
        reservations:
          cpus: '0.15'
          memory: 300M
      restart_policy:
        condition: on-failure
        delay: 1s
      update_config:
        order: start-first


  minio:
    image: minio/minio
    hostname: minio
    volumes:
      - minio_data:/var/data
    environment:
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY}
    ports:
      - 9000:9000
    command: server /var/data
    networks:
      - storage
      - webserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - "node.role==manager"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3


  webserver:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    secrets:
      - nginx.crt
      - nginx.key
    networks:
      - webserver
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          cpus: '0.5'
          memory: 300M
        reservations:
          cpus: '0.05'
          memory: 15M
      restart_policy:
        condition: on-failure
        delay: 1s
      update_config:
        order: start-first


secrets:
  nginx.crt:
    external: true
  nginx.key:
    external: true


volumes:
  dbdata:
  minio_data:


networks:
  db:
  storage:
  webserver:
